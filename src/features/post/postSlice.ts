import { Action, createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { getRequest } from './postApi'

interface PostState {
  post: {
    data: []
    loading: boolean
    error: boolean
  }
}

const initialState = {
  data: [],
  loading: false,
  error: false,
}

export const getAllAsync = createAsyncThunk('post/getAllPost', async () => {
  const response = await getRequest('/posts')
  return response.data
})

export const postSlice = createSlice({
  name: 'post',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    getPost: () => {},

    // Use the PayloadAction type to declare the contents of `action.payload`
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllAsync.pending, (state) => {
        state.loading = true
      })
      .addCase(getAllAsync.fulfilled, (state, action) => {
        state.loading = false
        state.data = action.payload
      })
      .addCase(getAllAsync.rejected, (state, action) => {
        state.loading = false
      })
  },
})

export const { getPost } = postSlice.actions

export const selectPost = (state: PostState) => state.post

export default postSlice.reducer
